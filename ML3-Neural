import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
     

df = pd.read_csv("Churn_Modelling.csv")
df.head()

df.shape
     
df.isnull().sum()

df.dtypes

df = df.drop(['RowNumber','Surname','CustomerId'], axis = 1)
     

states = pd.get_dummies(df['Geography'],drop_first = True)
gender = pd.get_dummies(df['Gender'],drop_first = True)
df = df.drop(['Geography','Gender'], axis = 1)
df

df = pd.concat([df,gender,states], axis = 1)
df

x = df.drop('Exited', axis = 1)
y = df['Exited']
     

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30)
     

x_train

y_train

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)
     

import keras
from keras.models import Sequential
from keras.layers import Dense #To create hidden layers

model = Sequential()

model.add(Dense(activation = "relu", input_dim = 11,units = 6, kernel_initializer = "uniform"))
model.add(Dense(activation = "relu", units = 6, kernel_initializer = "uniform"))   #Adding second hidden layers
model.add(Dense(activation = "sigmoid", units = 1,kernel_initializer = "uniform"))  #Final neuron will be having siigmoid function

model.compile(optimizer="adam", loss = 'binary_crossentropy', metrics = ['accuracy']) #To compile the Artificial Neural Network. Ussed Binary crossentropy as we just have only two output
model.summary() #3 layers created. 6 neurons in 1st,6neurons in 2nd layer and 1 neuron in last

model.fit(x_train,y_train,batch_size=11,epochs=50) #Fitting the ANN to training dataset


y_pred = model.predict(x_test)
y_pred = (y_pred > 0.5)
     

from sklearn import metrics
     
metrics.accuracy_score(y_test, y_pred)

metrics.confusion_matrix(y_test, y_pred)
